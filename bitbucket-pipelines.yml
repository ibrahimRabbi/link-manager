# Bitbucket Pipeline for deploying LM-UI to staging and production

image: node:18.10.0-alpine

definitions:
  caches:
    node: node_modules

  variables:
    SENTRY_DSN: $SENTRY_DSN

  steps:
    - step: &lint
        name: 'Lint'
        caches:
          - node
        script:
          - yarn install
          - yarn run lint src/

    - step: &build
        name: 'Build'
        caches:
          - node
        script:
          - touch .env
          - echo "NODE_ENV=development" >> .env
          - echo "REACT_APP_LM_REST_API_URL=https://lm-api-dev.koneksys.com/api/v1" >> .env
          - echo "REACT_APP_CONFIGURATION_AWARE=false" >> .env
          - echo "REACT_APP_JIRA_DIALOG_URL=https://jira-oslc-api-dev.koneksys.com" >> .env
          - echo "REACT_APP_GITLAB_DIALOG_URL=https://gitlab-oslc-api-dev.koneksys.com" >> .env
          - echo "REACT_APP_GLIDE_DIALOG_URL=https://glide-oslc-api-dev.koneksys.com" >> .env
          - echo "REACT_APP_SENTRY_DSN=$SENTRY_DSN" >> .env
          - yarn install
          - yarn build
        artifacts:
          - build/**

    - step: &docker-build
        name: 'Docker Build'
        script:
          - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
          - docker build -t $DOCKER_HUB_USER/link-manager:lm-ui .
          - docker push $DOCKER_HUB_USER/link-manager:lm-ui

pipelines:
  default:
    - step: *lint

    - step: *build

  branches:
    develop:
      - step:
          <<: *docker-build
          name: 'Docker Build on Develop'

      # The following deployment steps will be executed for each pipeline run. To configure your steps and conditionally deploy see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/
      - step:
          name: 'Deployment to Staging'
          deployment: staging
          script:
            - pipe: atlassian/rsync-deploy:0.8.1
              variables:
                USER: $SERVER_USER
                SERVER: $SERVER_IP
                REMOTE_PATH: '/var/www/lm-dev'
                LOCAL_PATH: 'build/**'

    main:
      - step:
          name: 'Deployment to Production'
          deployment: production
          trigger: 'manual'
          script:
            - echo "Your deployment to production script goes here..."


options:
  docker: true
