# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - lint
  - build
  - test
  - deploy

lint-job:
  stage: lint
  image: node:18.10.0-alpine
  script:
    - echo "Linting the src"
    - yarn install
    - yarn run lint src/
    - echo "Compile complete."

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: node:18.10.0-alpine
  script:
    - echo "Compiling the code..."
    - yarn install
    - yarn build
    - echo "Compile complete."
  artifacts:
    paths:
      - dist

.unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

deploy-job-development:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: development
  before_script:
    - echo "Detecting ssh-agent..."
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y  )"
    - echo "Updating ssh-agent..."
    - "which rsync || ( apt-get update -y && apt-get install rsync -y )"
    - echo "Evaluating ssh-agent..."
    - eval $(ssh-agent -s)
    - echo "Injecting key..."
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - echo "Scanning server..."
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
  script:
    - echo "Deploying application..."
    - scp -r dist/* $SERVER_USER@$SERVER_IP:/var/www/lm-dev
    - echo "Application successfully deployed."


.deploy-job-staging:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: staging
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

.deploy-job-production:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  when: manual
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
